import { BaseClient } from "./core";

export default class extends BaseClient {
  constructor() {
    super("{{servers/0/url}}");
  }

{{#each endPoints}}
{{#each operations}}
  /**
  * {{description}}
  */
  {{name}}(parameters = {}) {
    const pathParameters = {
{{#each ../parameters}}      "{{name}}": parameters["{{name}}"]{{#unless @last}},{{/unless}}
{{/each}}
    };

{{#if ../parameters}}
    for (let param in pathParameters) {
      if (pathParameters[param] === undefined
          || pathParameters[param] === null) {
        throw new Error(`Parameter '${param}' is required when calling {{name}}`);
      }
    }

{{/if}}
    const queryParameters = {
{{#each request/queryParameters}}      "{{name}}": parameters["{{name}}"]{{#unless @last}},{{/unless}}
{{/each}}
    }

    const requiredQueryParameters = [];
{{#each request/queryParameters}}{{#is required "true"}}    requiredQueryParameters.push("{{name}}");
{{/is}}{{/each}}

{{#if request/queryParameters}}
    for (let param in requiredQueryParameters) {
      if (queryParameters[param] === undefined
          || queryParameters[param] === null) {
        throw new Error(`Parameter '${param}' is required when calling {{name}}`);
      }
    }

{{/if}}
    return this.{{method}}("{{../path}}", pathParameters, queryParameters);
  }

{{/each}}
{{/each}}
}

