
import { ShopperToken, stripBearer } from "@commerce-apps/core"
import  * as sdk from "./"


const shopperAuthApi = sdk.{{shopperAuthClient}}.Client.prototype.{{shopperAuthApi}};

export async function getAuthToken<T extends typeof shopperAuthApi>(
        options: T extends (arg: infer A) => any
          ? { parameters: { clientId?: string; shortCode?: string } } & A
          : never
      ): Promise<ShopperToken> {

        let client = new sdk.{{shopperAuthClient}}.Client({    
                baseUriParameters: {
                        shortCode: options.parameters.shortCode
                }
        });

        options.rawResponse = true;
        let headers = {
              "x-dw-client-id": options.parameters.clientId
        }
        options.headers = headers;

        // At some point this should go through the same stripping as everything else.  
        //  Should be part of the global config story
        delete options.parameters.clientId;
        delete options.parameters.shortCode;

        let response = await client.authorizeCustomer(options) as Response;
        if (!response.ok) {
                throw new Error(`${response.status}: ${response.statusText}`)
        }
        
        return new ShopperToken(stripBearer(response.headers.get("Authorization")));
}
